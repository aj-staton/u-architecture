""" vector_generate.py
  A script to generate test vectors for `decode.sv`, the instruction
  decoding module. Output will be written to the `/testbench` dir.
  

  Written by: Austin Staton
  Date: Oct. 18th, 2020.

  Format of expected values:
    instr_funct7_rs2_rs1_funct3_rd_opcode_immI_immJ
"""
import os 
import random
from datetime import date

NOW = date.today()
FILENAME="decode_vectors.txt"
PWD = os.path.dirname(__file__)
VECTORPATH="/../testbench/"
OUTPATH=PWD+VECTORPATH+FILENAME

DEBUG = 0
print ("randomizing instruction decoder vectors...")
with open(OUTPATH, 'w') as f:
    # Header information.
    f.write("/*\nGenerated by: " + __file__ + "\nDate:" + str(NOW) + 
            "\nFormat: INSTR_FUNCT7_RS2_RS1_FUNCT3_RD_OPCODE_IMMi_IMMu\n" +
            "*/\n")
    

    instruction = list("00000000000000000000000000000000")
    counter = 94

    for i in range(32):
        # Create the input by randomly selecting a bit (of the 32) to make high.
        flip = random.randrange(0,32)
        if (DEBUG):
            print("flippped index = " + str(flip))

        instruction[flip] = "1" # For a more random approach, use this.
        #instruction[i] = "1" # For a more structured approach, use this.
        f.write("".join(instruction))
        
        f.write("_")
        
        # Get outputs
        
        # Break up the values
        funct7 = instruction[0:7]
        if (DEBUG):
            print("len of funct7 = " + str(len(funct7)))
        f.write("".join(funct7) + "_")

        rs2 = instruction[7:12]
        if (DEBUG):
            print("len of rs2 = " + str(len(rs2)))
        f.write("".join(rs2) + "_")

        rs1 = instruction[12:17]
        if (DEBUG):
            print("len of rs1 = " + str(len(rs1)))
        f.write("".join(rs1) + "_")

        funct3 = instruction[17:20]
        if (DEBUG):
            print("len of funct3 = " + str(len(funct3)))
        f.write("".join(funct3) + "_")

        rd = instruction[20:25]
        if (DEBUG):
            print("len of rd = " + str(len(rd)))
        f.write("".join(rd) + "_")

        opcode = instruction[25:32]
        if (DEBUG):
            print("len of opcode = " + str(len(opcode)))
        f.write("".join(opcode) + "_")

        imm_i = instruction[0:12]
        if (DEBUG):
            print("len of imm_i = " + str(len(imm_i)))
        f.write("".join(imm_i) + "_")

        imm_u = instruction[0:20]
        if (DEBUG):
            print("len of imm_u = " + str(len(imm_u)) + "\n")
        f.write("".join(imm_u) + "_")

        
        instruction[flip] = "0" # To use the random approach, use this.
        # instruction[i] = "0" # For a more structured approach, use this.
        f.write("\n")

print ("vectors written to " + OUTPATH + "\n")
    


